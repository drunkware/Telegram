/*
 * This is the source code of Telegram for Android v. 1.3.2.
 * It is licensed under GNU GPL v. 2 or later.
 * You should have received a copy of the license in this archive (see LICENSE).
 *
 * Copyright Nikolai Kudashov, 2013.
 */

package org.telegram.messenger;

import java.io.File;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Locale;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.text.Spannable;
import android.text.style.DynamicDrawableSpan;
import android.text.style.ImageSpan;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import org.telegram.ui.ApplicationLoader;

public class Emoji {
	private static HashMap<Long, DrawableInfo> rects = new HashMap<Long, DrawableInfo>();
    public static HashMap<Character, String> subSB = new HashMap<Character, String>();
	private static int drawImgSize, bigImgSize;
	private static boolean inited = false;
	private static Paint placeholderPaint;
	private static Bitmap emojiBmp = null;
	private static boolean loadingEmoji = false;

    private static final char[] emojiChars = {
            0x00A9, 0x00AE, 0x203C, 0x2049, 0x2122, 0x2139, 0x2194, 0x2195, 0x2196, 0x2197,
            0x2198, 0x2199, 0x21A9, 0x21AA, 0x231A, 0x231B, 0x23E9, 0x23EA, 0x23EB, 0x23EC,
            0x23F0, 0x23F3, 0x24C2, 0x25AA, 0x25AB, 0x25B6, 0x25C0, 0x25FB, 0x25FC, 0x25FD,
            0x25FE, 0x2600, 0x2601, 0x260E, 0x2611, 0x2614, 0x2615, 0x261D, 0x263A, 0x2648,
            0x2649, 0x264A, 0x264B, 0x264C, 0x264D, 0x264E, 0x264F, 0x2650, 0x2651, 0x2652,
            0x2653, 0x2660, 0x2663, 0x2665, 0x2666, 0x2668, 0x267B, 0x267F, 0x2693, 0x26A0,
            0x26A1, 0x26AA, 0x26AB, 0x26BD, 0x26BE, 0x26C4, 0x26C5, 0x26CE, 0x26D4, 0x26EA,
            0x26F2, 0x26F3, 0x26F5, 0x26FA, 0x26FD, 0x2702, 0x2705, 0x2708, 0x2709, 0x270A,
            0x270B, 0x270C, 0x270F, 0x2712, 0x2714, 0x2716, 0x2728, 0x2733, 0x2734, 0x2744,
            0x2747, 0x274C, 0x274E, 0x2753, 0x2754, 0x2755, 0x2757, 0x2764, 0x2795, 0x2796,
            0x2797, 0x27A1, 0x27B0, 0x27BF, 0x2934, 0x2935, 0x2B05, 0x2B06, 0x2B07, 0x2B1B,
            0x2B1C, 0x2B50, 0x2B55, 0x3030, 0x303D, 0x3297, 0x3299
    };

    public static  long[][] data = {
            new long[]
                    {},
            new long[]
                    {0x00000000D83DDE04L, 0x00000000D83DDE03L, 0x00000000D83DDE00L, 0x00000000D83DDE0AL, 0x000000000000263AL, 0x00000000D83DDE09L, 0x00000000D83DDE0DL,
                    0x00000000D83DDE18L, 0x00000000D83DDE1AL, 0x00000000D83DDE17L, 0x00000000D83DDE19L, 0x00000000D83DDE1CL, 0x00000000D83DDE1DL, 0x00000000D83DDE1BL,
                    0x00000000D83DDE33L, 0x00000000D83DDE01L, 0x00000000D83DDE14L, 0x00000000D83DDE0CL, 0x00000000D83DDE12L, 0x00000000D83DDE1EL, 0x00000000D83DDE23L,
                    0x00000000D83DDE22L, 0x00000000D83DDE02L, 0x00000000D83DDE2DL, 0x00000000D83DDE2AL, 0x00000000D83DDE25L, 0x00000000D83DDE30L, 0x00000000D83DDE05L,
                    0x00000000D83DDE13L, 0x00000000D83DDE29L, 0x00000000D83DDE2BL, 0x00000000D83DDE28L, 0x00000000D83DDE31L, 0x00000000D83DDE20L, 0x00000000D83DDE21L,
                    0x00000000D83DDE24L, 0x00000000D83DDE16L, 0x00000000D83DDE06L, 0x00000000D83DDE0BL, 0x00000000D83DDE37L, 0x00000000D83DDE0EL, 0x00000000D83DDE34L,
                    0x00000000D83DDE35L, 0x00000000D83DDE32L, 0x00000000D83DDE1FL, 0x00000000D83DDE26L, 0x00000000D83DDE27L, 0x00000000D83DDE08L, 0x00000000D83DDC7FL,
                    0x00000000D83DDE2EL, 0x00000000D83DDE2CL, 0x00000000D83DDE10L, 0x00000000D83DDE15L, 0x00000000D83DDE2FL, 0x00000000D83DDE36L, 0x00000000D83DDE07L,
                    0x00000000D83DDE0FL, 0x00000000D83DDE11L, 0x00000000D83DDC72L, 0x00000000D83DDC73L, 0x00000000D83DDC6EL, 0x00000000D83DDC77L, 0x00000000D83DDC82L,
                    0x00000000D83DDC76L, 0x00000000D83DDC66L, 0x00000000D83DDC67L, 0x00000000D83DDC68L, 0x00000000D83DDC69L, 0x00000000D83DDC74L, 0x00000000D83DDC75L,
                    0x00000000D83DDC71L, 0x00000000D83DDC7CL, 0x00000000D83DDC78L, 0x00000000D83DDE3AL, 0x00000000D83DDE38L, 0x00000000D83DDE3BL, 0x00000000D83DDE3DL,
                    0x00000000D83DDE3CL, 0x00000000D83DDE40L, 0x00000000D83DDE3FL, 0x00000000D83DDE39L, 0x00000000D83DDE3EL, 0x00000000D83DDC79L, 0x00000000D83DDC7AL,
                    0x00000000D83DDE48L, 0x00000000D83DDE49L, 0x00000000D83DDE4AL, 0x00000000D83DDC80L, 0x00000000D83DDC7DL, 0x00000000D83DDCA9L, 0x00000000D83DDD25L,
                    0x0000000000002728L, 0x00000000D83CDF1FL, 0x00000000D83DDCABL, 0x00000000D83DDCA5L, 0x00000000D83DDCA2L, 0x00000000D83DDCA6L, 0x00000000D83DDCA7L,
                    0x00000000D83DDCA4L, 0x00000000D83DDCA8L, 0x00000000D83DDC42L, 0x00000000D83DDC40L, 0x00000000D83DDC43L, 0x00000000D83DDC45L, 0x00000000D83DDC44L,
                    0x00000000D83DDC4DL, 0x00000000D83DDC4EL, 0x00000000D83DDC4CL, 0x00000000D83DDC4AL, 0x000000000000270AL, 0x000000000000270CL, 0x00000000D83DDC4BL,
                    0x000000000000270BL, 0x00000000D83DDC50L, 0x00000000D83DDC46L, 0x00000000D83DDC47L, 0x00000000D83DDC49L, 0x00000000D83DDC48L, 0x00000000D83DDE4CL,
                    0x00000000D83DDE4FL, 0x000000000000261DL, 0x00000000D83DDC4FL, 0x00000000D83DDCAAL, 0x00000000D83DDEB6L, 0x00000000D83CDFC3L, 0x00000000D83DDC83L,
                    0x00000000D83DDC6BL, 0x00000000D83DDC6AL, 0x00000000D83DDC6CL, 0x00000000D83DDC6DL, 0x00000000D83DDC8FL, 0x00000000D83DDC91L, 0x00000000D83DDC6FL,
                    0x00000000D83DDE46L, 0x00000000D83DDE45L, 0x00000000D83DDC81L, 0x00000000D83DDE4BL, 0x00000000D83DDC86L, 0x00000000D83DDC87L, 0x00000000D83DDC85L,
                    0x00000000D83DDC70L, 0x00000000D83DDE4EL, 0x00000000D83DDE4DL, 0x00000000D83DDE47L, 0x00000000D83CDFA9L, 0x00000000D83DDC51L, 0x00000000D83DDC52L,
                    0x00000000D83DDC5FL, 0x00000000D83DDC5EL, 0x00000000D83DDC61L, 0x00000000D83DDC60L, 0x00000000D83DDC62L, 0x00000000D83DDC55L, 0x00000000D83DDC54L,
                    0x00000000D83DDC5AL, 0x00000000D83DDC57L, 0x00000000D83CDFBDL, 0x00000000D83DDC56L, 0x00000000D83DDC58L, 0x00000000D83DDC59L, 0x00000000D83DDCBCL,
                    0x00000000D83DDC5CL, 0x00000000D83DDC5DL, 0x00000000D83DDC5BL, 0x00000000D83DDC53L, 0x00000000D83CDF80L, 0x00000000D83CDF02L, 0x00000000D83DDC84L,
                    0x00000000D83DDC9BL, 0x00000000D83DDC99L, 0x00000000D83DDC9CL, 0x00000000D83DDC9AL, 0x0000000000002764L, 0x00000000D83DDC94L, 0x00000000D83DDC97L,
                    0x00000000D83DDC93L, 0x00000000D83DDC95L, 0x00000000D83DDC96L, 0x00000000D83DDC9EL, 0x00000000D83DDC98L, 0x00000000D83DDC8CL, 0x00000000D83DDC8BL,
                    0x00000000D83DDC8DL, 0x00000000D83DDC8EL, 0x00000000D83DDC64L, 0x00000000D83DDC65L, 0x00000000D83DDCACL, 0x00000000D83DDC63L, 0x00000000D83DDCADL},
            new long[]
                    {0x00000000D83DDC36L, 0x00000000D83DDC3AL, 0x00000000D83DDC31L, 0x00000000D83DDC2DL, 0x00000000D83DDC39L, 0x00000000D83DDC30L, 0x00000000D83DDC38L, 0x00000000D83DDC2FL,
                    0x00000000D83DDC28L, 0x00000000D83DDC3BL, 0x00000000D83DDC37L, 0x00000000D83DDC3DL, 0x00000000D83DDC2EL, 0x00000000D83DDC17L, 0x00000000D83DDC35L,
                    0x00000000D83DDC12L, 0x00000000D83DDC34L, 0x00000000D83DDC11L, 0x00000000D83DDC18L, 0x00000000D83DDC3CL, 0x00000000D83DDC27L, 0x00000000D83DDC26L,
                    0x00000000D83DDC24L, 0x00000000D83DDC25L, 0x00000000D83DDC23L, 0x00000000D83DDC14L, 0x00000000D83DDC0DL, 0x00000000D83DDC22L, 0x00000000D83DDC1BL,
                    0x00000000D83DDC1DL, 0x00000000D83DDC1CL, 0x00000000D83DDC1EL, 0x00000000D83DDC0CL, 0x00000000D83DDC19L, 0x00000000D83DDC1AL, 0x00000000D83DDC20L,
                    0x00000000D83DDC1FL, 0x00000000D83DDC2CL, 0x00000000D83DDC33L, 0x00000000D83DDC0BL, 0x00000000D83DDC04L, 0x00000000D83DDC0FL, 0x00000000D83DDC00L,
                    0x00000000D83DDC03L, 0x00000000D83DDC05L, 0x00000000D83DDC07L, 0x00000000D83DDC09L, 0x00000000D83DDC0EL, 0x00000000D83DDC10L, 0x00000000D83DDC13L,
                    0x00000000D83DDC15L, 0x00000000D83DDC16L, 0x00000000D83DDC01L, 0x00000000D83DDC02L, 0x00000000D83DDC32L, 0x00000000D83DDC21L, 0x00000000D83DDC0AL,
                    0x00000000D83DDC2BL, 0x00000000D83DDC2AL, 0x00000000D83DDC06L, 0x00000000D83DDC08L, 0x00000000D83DDC29L, 0x00000000D83DDC3EL, 0x00000000D83DDC90L,
                    0x00000000D83CDF38L, 0x00000000D83CDF37L, 0x00000000D83CDF40L, 0x00000000D83CDF39L, 0x00000000D83CDF3BL, 0x00000000D83CDF3AL, 0x00000000D83CDF41L,
                    0x00000000D83CDF43L, 0x00000000D83CDF42L, 0x00000000D83CDF3FL, 0x00000000D83CDF3EL, 0x00000000D83CDF44L, 0x00000000D83CDF35L, 0x00000000D83CDF34L,
                    0x00000000D83CDF32L, 0x00000000D83CDF33L, 0x00000000D83CDF30L, 0x00000000D83CDF31L, 0x00000000D83CDF3CL, 0x00000000D83CDF10L, 0x00000000D83CDF1EL,
                    0x00000000D83CDF1DL, 0x00000000D83CDF1AL, 0x00000000D83CDF11L, 0x00000000D83CDF12L, 0x00000000D83CDF13L, 0x00000000D83CDF14L, 0x00000000D83CDF15L,
                    0x00000000D83CDF16L, 0x00000000D83CDF17L, 0x00000000D83CDF18L, 0x00000000D83CDF1CL, 0x00000000D83CDF1BL, 0x00000000D83CDF19L, 0x00000000D83CDF0DL,
                    0x00000000D83CDF0EL, 0x00000000D83CDF0FL, 0x00000000D83CDF0BL, 0x00000000D83CDF0CL, 0x00000000D83CDF20L, 0x0000000000002B50L, 0x0000000000002600L,
                    0x00000000000026C5L, 0x0000000000002601L, 0x00000000000026A1L, 0x0000000000002614L, 0x0000000000002744L, 0x00000000000026C4L, 0x00000000D83CDF00L,
                    0x00000000D83CDF01L, 0x00000000D83CDF08L, 0x00000000D83CDF0AL},
            new long[]
                    {0x00000000D83CDF8DL, 0x00000000D83DDC9DL, 0x00000000D83CDF8EL, 0x00000000D83CDF92L, 0x00000000D83CDF93L, 0x00000000D83CDF8FL, 0x00000000D83CDF86L, 0x00000000D83CDF87L,
                    0x00000000D83CDF90L, 0x00000000D83CDF91L, 0x00000000D83CDF83L, 0x00000000D83DDC7BL, 0x00000000D83CDF85L, 0x00000000D83CDF84L, 0x00000000D83CDF81L,
                    0x00000000D83CDF8BL, 0x00000000D83CDF89L, 0x00000000D83CDF8AL, 0x00000000D83CDF88L, 0x00000000D83CDF8CL, 0x00000000D83DDD2EL, 0x00000000D83CDFA5L,
                    0x00000000D83DDCF7L, 0x00000000D83DDCF9L, 0x00000000D83DDCFCL, 0x00000000D83DDCBFL, 0x00000000D83DDCC0L, 0x00000000D83DDCBDL, 0x00000000D83DDCBEL,
                    0x00000000D83DDCBBL, 0x00000000D83DDCF1L, 0x000000000000260EL, 0x00000000D83DDCDEL, 0x00000000D83DDCDFL, 0x00000000D83DDCE0L, 0x00000000D83DDCE1L,
                    0x00000000D83DDCFAL, 0x00000000D83DDCFBL, 0x00000000D83DDD0AL, 0x00000000D83DDD09L, 0x00000000D83DDD08L, 0x00000000D83DDD07L, 0x00000000D83DDD14L,
                    0x00000000D83DDD14L, 0x00000000D83DDCE2L, 0x00000000D83DDCE3L, 0x00000000000023F3L, 0x000000000000231BL, 0x00000000000023F0L, 0x000000000000231AL,
                    0x00000000D83DDD13L, 0x00000000D83DDD12L, 0x00000000D83DDD0FL, 0x00000000D83DDD10L, 0x00000000D83DDD11L, 0x00000000D83DDD0EL, 0x00000000D83DDCA1L,
                    0x00000000D83DDD26L, 0x00000000D83DDD06L, 0x00000000D83DDD05L, 0x00000000D83DDD0CL, 0x00000000D83DDD0BL, 0x00000000D83DDD0DL, 0x00000000D83DDEC0L,
                    0x00000000D83DDEBFL, 0x00000000D83DDEBDL, 0x00000000D83DDD27L, 0x00000000D83DDD29L, 0x00000000D83DDD28L, 0x00000000D83DDEAAL, 0x00000000D83DDEACL,
                    0x00000000D83DDCA3L, 0x00000000D83DDD2BL, 0x00000000D83DDD2AL, 0x00000000D83DDC8AL, 0x00000000D83DDC89L, 0x00000000D83DDCB0L, 0x00000000D83DDCB4L,
                    0x00000000D83DDCB5L, 0x00000000D83DDCB7L, 0x00000000D83DDCB6L, 0x00000000D83DDCB3L, 0x00000000D83DDCB8L, 0x00000000D83DDCF2L, 0x00000000D83DDCE7L,
                    0x00000000D83DDCE5L, 0x00000000D83DDCE4L, 0x0000000000002709L, 0x00000000D83DDCE9L, 0x00000000D83DDCE8L, 0x00000000D83DDCEFL, 0x00000000D83DDCEBL,
                    0x00000000D83DDCEAL, 0x00000000D83DDCECL, 0x00000000D83DDCEDL, 0x00000000D83DDCEEL, 0x00000000D83DDCE6L, 0x00000000D83DDCDDL, 0x00000000D83DDCC4L,
                    0x00000000D83DDCC3L, 0x00000000D83DDCD1L, 0x00000000D83DDCCAL, 0x00000000D83DDCC8L, 0x00000000D83DDCC9L, 0x00000000D83DDCDCL, 0x00000000D83DDCCBL,
                    0x00000000D83DDCC5L, 0x00000000D83DDCC6L, 0x00000000D83DDCC7L, 0x00000000D83DDCC1L, 0x00000000D83DDCC2L, 0x0000000000002702L, 0x00000000D83DDCCCL,
                    0x00000000D83DDCCEL, 0x0000000000002712L, 0x000000000000270FL, 0x00000000D83DDCCFL, 0x00000000D83DDCD0L, 0x00000000D83DDCD5L, 0x00000000D83DDCD7L,
                    0x00000000D83DDCD8L, 0x00000000D83DDCD9L, 0x00000000D83DDCD3L, 0x00000000D83DDCD4L, 0x00000000D83DDCD2L, 0x00000000D83DDCDAL, 0x00000000D83DDCD6L,
                    0x00000000D83DDD16L, 0x00000000D83DDCDBL, 0x00000000D83DDD2CL, 0x00000000D83DDD2DL, 0x00000000D83DDCF0L, 0x00000000D83CDFA8L, 0x00000000D83CDFACL,
                    0x00000000D83CDFA4L, 0x00000000D83CDFA7L, 0x00000000D83CDFBCL, 0x00000000D83CDFB5L, 0x00000000D83CDFB6L, 0x00000000D83CDFB9L, 0x00000000D83CDFBBL,
                    0x00000000D83CDFBAL, 0x00000000D83CDFB7L, 0x00000000D83CDFB8L, 0x00000000D83DDC7EL, 0x00000000D83CDFAEL, 0x00000000D83CDCCFL, 0x00000000D83CDFB4L,
                    0x00000000D83CDC04L, 0x00000000D83CDFB2L, 0x00000000D83CDFAFL, 0x00000000D83CDFC8L, 0x00000000D83CDFC0L, 0x00000000000026BDL, 0x00000000000026BEL,
                    0x00000000D83CDFBEL, 0x00000000D83CDFB1L, 0x00000000D83CDFC9L, 0x00000000D83CDFB3L, 0x00000000000026F3L, 0x00000000D83DDEB5L, 0x00000000D83DDEB4L,
                    0x00000000D83CDFC1L, 0x00000000D83CDFC7L, 0x00000000D83CDFC6L, 0x00000000D83CDFBFL, 0x00000000D83CDFC2L, 0x00000000D83CDFCAL, 0x00000000D83CDFC4L,
                    0x00000000D83CDFA3L, 0x0000000000002615L, 0x00000000D83CDF75L, 0x00000000D83CDF76L, 0x00000000D83CDF7CL, 0x00000000D83CDF7AL, 0x00000000D83CDF7BL,
                    0x00000000D83CDF78L, 0x00000000D83CDF79L, 0x00000000D83CDF77L, 0x00000000D83CDF74L, 0x00000000D83CDF55L, 0x00000000D83CDF54L, 0x00000000D83CDF5FL,
                    0x00000000D83CDF57L, 0x00000000D83CDF56L, 0x00000000D83CDF5DL, 0x00000000D83CDF5BL, 0x00000000D83CDF64L, 0x00000000D83CDF71L, 0x00000000D83CDF63L,
                    0x00000000D83CDF65L, 0x00000000D83CDF59L, 0x00000000D83CDF58L, 0x00000000D83CDF5AL, 0x00000000D83CDF5CL, 0x00000000D83CDF72L, 0x00000000D83CDF62L,
                    0x00000000D83CDF61L, 0x00000000D83CDF73L, 0x00000000D83CDF5EL, 0x00000000D83CDF69L, 0x00000000D83CDF6EL, 0x00000000D83CDF66L, 0x00000000D83CDF68L,
                    0x00000000D83CDF67L, 0x00000000D83CDF82L, 0x00000000D83CDF70L, 0x00000000D83CDF6AL, 0x00000000D83CDF6BL, 0x00000000D83CDF6CL, 0x00000000D83CDF6DL,
                    0x00000000D83CDF6FL, 0x00000000D83CDF4EL, 0x00000000D83CDF4FL, 0x00000000D83CDF4AL, 0x00000000D83CDF4BL, 0x00000000D83CDF52L, 0x00000000D83CDF47L,
                    0x00000000D83CDF49L, 0x00000000D83CDF53L, 0x00000000D83CDF51L, 0x00000000D83CDF48L, 0x00000000D83CDF4CL, 0x00000000D83CDF50L, 0x00000000D83CDF4DL,
                    0x00000000D83CDF60L, 0x00000000D83CDF46L, 0x00000000D83CDF45L, 0x00000000D83CDF3DL},
            new long[]
                    {0x00000000D83CDFE0L, 0x00000000D83CDFE1L, 0x00000000D83CDFEBL, 0x00000000D83CDFE2L, 0x00000000D83CDFE3L, 0x00000000D83CDFE5L, 0x00000000D83CDFE6L, 0x00000000D83CDFEAL,
                    0x00000000D83CDFE9L, 0x00000000D83CDFE8L, 0x00000000D83DDC92L, 0x00000000000026EAL, 0x00000000D83CDFECL, 0x00000000D83CDFE4L, 0x00000000D83CDF07L,
                    0x00000000D83CDF06L, 0x00000000D83CDFEFL, 0x00000000D83CDFF0L, 0x00000000000026FAL, 0x00000000D83CDFEDL, 0x00000000D83DDDFCL, 0x00000000D83DDDFEL,
                    0x00000000D83DDDFBL, 0x00000000D83CDF04L, 0x00000000D83CDF05L, 0x00000000D83CDF03L, 0x00000000D83DDDFDL, 0x00000000D83CDF09L, 0x00000000D83CDFA0L,
                    0x00000000D83CDFA1L, 0x00000000000026F2L, 0x00000000D83CDFA2L, 0x00000000D83DDEA2L, 0x00000000000026F5L, 0x00000000D83DDEA4L, 0x00000000D83DDEA3L,
                    0x0000000000002693L, 0x00000000D83DDE80L, 0x0000000000002708L, 0x00000000D83DDCBAL, 0x00000000D83DDE81L, 0x00000000D83DDE82L, 0x00000000D83DDE8AL,
                    0x00000000D83DDE89L, 0x00000000D83DDE9EL, 0x00000000D83DDE86L, 0x00000000D83DDE84L, 0x00000000D83DDE85L, 0x00000000D83DDE88L, 0x00000000D83DDE87L,
                    0x00000000D83DDE9DL, 0x00000000D83DDE8BL, 0x00000000D83DDE83L, 0x00000000D83DDE8EL, 0x00000000D83DDE8CL, 0x00000000D83DDE8DL, 0x00000000D83DDE99L,
                    0x00000000D83DDE98L, 0x00000000D83DDE97L, 0x00000000D83DDE95L, 0x00000000D83DDE96L, 0x00000000D83DDE9BL, 0x00000000D83DDE9AL, 0x00000000D83DDEA8L,
                    0x00000000D83DDE93L, 0x00000000D83DDE94L, 0x00000000D83DDE92L, 0x00000000D83DDE91L, 0x00000000D83DDE90L, 0x00000000D83DDEB2L, 0x00000000D83DDEA1L,
                    0x00000000D83DDE9FL, 0x00000000D83DDEA0L, 0x00000000D83DDE9CL, 0x00000000D83DDC88L, 0x00000000D83DDE8FL, 0x00000000D83CDFABL, 0x00000000D83DDEA6L,
                    0x00000000D83DDEA5L, 0x00000000000026A0L, 0x00000000D83DDEA7L, 0x00000000D83DDD30L, 0x00000000000026FDL, 0x00000000D83CDFEEL, 0x00000000D83CDFB0L,
                    0x0000000000002668L, 0x00000000D83DDDFFL, 0x00000000D83CDFAAL, 0x00000000D83CDFADL, 0x00000000D83DDCCDL, 0x00000000D83DDEA9L, 0xD83CDDEFD83CDDF5L,
                    0xD83CDDF0D83CDDF7L, 0xD83CDDE9D83CDDEAL, 0xD83CDDE8D83CDDF3L, 0xD83CDDFAD83CDDF8L, 0xD83CDDEBD83CDDF7L, 0xD83CDDEAD83CDDF8L, 0xD83CDDEED83CDDF9L,
                    0xD83CDDF7D83CDDFAL, 0xD83CDDECD83CDDE7L},
            new long[]
                    {0x00000000003120E3L, 0x00000000003220E3L, 0x00000000003320E3L, 0x00000000003420E3L, 0x00000000003520E3L, 0x00000000003620E3L, 0x00000000003720E3L, 0x00000000003820E3L,
                    0x00000000003920E3L, 0x00000000003020E3L, 0x00000000D83DDD1FL, 0x00000000D83DDD22L, 0x00000000002320E3L, 0x00000000D83DDD23L, 0x0000000000002B06L,
                    0x0000000000002B07L, 0x0000000000002B05L, 0x00000000000027A1L, 0x00000000D83DDD20L, 0x00000000D83DDD21L, 0x00000000D83DDD24L, 0x0000000000002197L,
                    0x0000000000002196L, 0x0000000000002198L, 0x0000000000002199L, 0x0000000000002194L, 0x0000000000002195L, 0x00000000D83DDD04L, 0x00000000000025C0L,
                    0x00000000000025B6L, 0x00000000D83DDD3CL, 0x00000000D83DDD3DL, 0x00000000000021A9L, 0x00000000000021AAL, 0x0000000000002139L, 0x00000000000023EAL,
                    0x00000000000023E9L, 0x00000000000023EBL, 0x00000000000023ECL, 0x0000000000002935L, 0x0000000000002934L, 0x00000000D83CDD97L, 0x00000000D83DDD00L,
                    0x00000000D83DDD01L, 0x00000000D83DDD02L, 0x00000000D83CDD95L, 0x00000000D83CDD99L, 0x00000000D83CDD92L, 0x00000000D83CDD93L, 0x00000000D83CDD96L,
                    0x00000000D83DDCF6L, 0x00000000D83CDFA6L, 0x00000000D83CDE01L, 0x00000000D83CDE2FL, 0x00000000D83CDE33L, 0x00000000D83CDE35L, 0x00000000D83CDE32L,
                    0x00000000D83CDE34L, 0x00000000D83CDE32L, 0x00000000D83CDE50L, 0x00000000D83CDE39L, 0x00000000D83CDE3AL, 0x00000000D83CDE36L, 0x00000000D83CDE1AL,
                    0x00000000D83DDEBBL, 0x00000000D83DDEB9L, 0x00000000D83DDEBAL, 0x00000000D83DDEBCL, 0x00000000D83DDEBEL, 0x00000000D83DDEB0L, 0x00000000D83DDEAEL,
                    0x00000000D83CDD7FL, 0x000000000000267FL, 0x00000000D83DDEADL, 0x00000000D83CDE37L, 0x00000000D83CDE38L, 0x00000000D83CDE02L, 0x00000000000024C2L,
                    0x00000000D83CDE51L, 0x0000000000003299L, 0x0000000000003297L, 0x00000000D83CDD91L, 0x00000000D83CDD98L, 0x00000000D83CDD94L, 0x00000000D83DDEABL,
                    0x00000000D83DDD1EL, 0x00000000D83DDCF5L, 0x00000000D83DDEAFL, 0x00000000D83DDEB1L, 0x00000000D83DDEB3L, 0x00000000D83DDEB7L, 0x00000000D83DDEB8L,
                    0x00000000000026D4L, 0x0000000000002733L, 0x0000000000002747L, 0x000000000000274EL, 0x0000000000002705L, 0x0000000000002734L, 0x00000000D83DDC9FL,
                    0x00000000D83CDD9AL, 0x00000000D83DDCF3L, 0x00000000D83DDCF4L, 0x00000000D83CDD70L, 0x00000000D83CDD71L, 0x00000000D83CDD8EL, 0x00000000D83CDD7EL,
                    0x00000000D83DDCA0L, 0x00000000000027BFL, 0x000000000000267BL, 0x0000000000002648L, 0x0000000000002649L, 0x000000000000264AL, 0x000000000000264BL,
                    0x000000000000264CL, 0x000000000000264DL, 0x000000000000264EL, 0x000000000000264FL, 0x0000000000002650L, 0x0000000000002651L, 0x0000000000002652L,
                    0x0000000000002653L, 0x00000000000026CEL, 0x00000000D83DDD2FL, 0x00000000D83CDFE7L, 0x00000000D83DDCB9L, 0x00000000D83DDCB2L, 0x00000000D83DDCB1L,
                    0x00000000000000A9L, 0x00000000000000AEL, 0x0000000000002122L, 0x000000000000303DL, 0x0000000000003030L, 0x00000000D83DDD1DL, 0x00000000D83DDD1AL,
                    0x00000000D83DDD19L, 0x00000000D83DDD1BL, 0x00000000D83DDD1CL, 0x000000000000274CL, 0x0000000000002B55L, 0x0000000000002757L, 0x0000000000002753L,
                    0x0000000000002755L, 0x0000000000002754L, 0x00000000D83DDD03L, 0x00000000D83DDD5BL, 0x00000000D83DDD67L, 0x00000000D83DDD50L, 0x00000000D83DDD5CL,
                    0x00000000D83DDD51L, 0x00000000D83DDD5DL, 0x00000000D83DDD52L, 0x00000000D83DDD5EL, 0x00000000D83DDD53L, 0x00000000D83DDD5FL, 0x00000000D83DDD54L,
                    0x00000000D83DDD60L, 0x00000000D83DDD55L, 0x00000000D83DDD56L, 0x00000000D83DDD57L, 0x00000000D83DDD58L, 0x00000000D83DDD59L, 0x00000000D83DDD5AL,
                    0x00000000D83DDD61L, 0x00000000D83DDD62L, 0x00000000D83DDD63L, 0x00000000D83DDD64L, 0x00000000D83DDD65L, 0x00000000D83DDD66L, 0x0000000000002716L,
                    0x0000000000002795L, 0x0000000000002796L, 0x0000000000002797L, 0x0000000000002660L, 0x0000000000002665L, 0x0000000000002663L, 0x0000000000002666L,
                    0x00000000D83DDCAEL, 0x00000000D83DDCAFL, 0x0000000000002714L, 0x0000000000002611L, 0x00000000D83DDD18L, 0x00000000D83DDD17L, 0x00000000000027B0L,
                    0x00000000D83DDD31L, 0x00000000D83DDD32L, 0x00000000D83DDD33L, 0x00000000000025FCL, 0x00000000000025FBL, 0x00000000000025FEL, 0x00000000000025FDL,
                    0x00000000000025AAL, 0x00000000000025ABL, 0x00000000D83DDD3AL, 0x0000000000002B1CL, 0x0000000000002B1BL, 0x00000000000026ABL, 0x00000000000026AAL,
                    0x00000000D83DDD34L, 0x00000000D83DDD35L, 0x00000000D83DDD3BL, 0x00000000D83DDD36L, 0x00000000D83DDD37L, 0x00000000D83DDD38L, 0x00000000D83DDD39L}};
	
	static {
        int imgSize = 30;
        if (Utilities.density <= 1.0f) {
            imgSize = 30;
        } else if (Utilities.density <= 1.5f) {
            imgSize = 45;
        } else if (Utilities.density <= 2.0f) {
            imgSize = 60;
        } else {
            imgSize = 90;
        }
		drawImgSize = Utilities.dp(20);
		bigImgSize = Utilities.dp(30);

        int num = 0;
		for (int j = 1; j < data.length; j++) {
			for (int i = 0; i < data[j].length; i++) {
				Rect rect = new Rect((num % 28) * imgSize, (num / 28) * imgSize, (num % 28 + 1) * imgSize, (num / 28 + 1) * imgSize);
				rects.put(data[j][i], new DrawableInfo(rect));
                num++;
			}
		}
		placeholderPaint = new Paint();
		placeholderPaint.setColor(0x55000000);

        // Emoji mapping from SB_Unicode to UTF16
        subSB.put('\uE415', "\uD83D\uDE04");
        subSB.put('\uE056', "\uD83D\uDE0A");
        subSB.put('\uE057', "\uD83D\uDE03");
        subSB.put('\uE414', "\u263A");
        subSB.put('\uE405', "\uD83D\uDE09");
        subSB.put('\uE106', "\uD83D\uDE0D");
        subSB.put('\uE418', "\uD83D\uDE18");
        subSB.put('\uE417', "\uD83D\uDE1A");
        subSB.put('\uE40D', "\uD83D\uDE33");
        subSB.put('\uE40A', "\uD83D\uDE0C");
        subSB.put('\uE404', "\uD83D\uDE01");
        subSB.put('\uE105', "\uD83D\uDE1C");
        subSB.put('\uE409', "\uD83D\uDE1D");
        subSB.put('\uE40E', "\uD83D\uDE12");
        subSB.put('\uE402', "\uD83D\uDE0F");
        subSB.put('\uE108', "\uD83D\uDE13");
        subSB.put('\uE403', "\uD83D\uDE14");
        subSB.put('\uE058', "\uD83D\uDE1E");
        subSB.put('\uE407', "\uD83D\uDE16");
        subSB.put('\uE401', "\uD83D\uDE25");
        subSB.put('\uE40F', "\uD83D\uDE30");
        subSB.put('\uE40B', "\uD83D\uDE28");
        subSB.put('\uE406', "\uD83D\uDE23");
        subSB.put('\uE413', "\uD83D\uDE22");
        subSB.put('\uE411', "\uD83D\uDE2D");
        subSB.put('\uE412', "\uD83D\uDE02");
        subSB.put('\uE410', "\uD83D\uDE32");
        subSB.put('\uE107', "\uD83D\uDE31");
        subSB.put('\uE059', "\uD83D\uDE20");
        subSB.put('\uE416', "\uD83D\uDE21");
        subSB.put('\uE408', "\uD83D\uDE2A");
        subSB.put('\uE40C', "\uD83D\uDE37");
        subSB.put('\uE11A', "\uD83D\uDC7F");
        subSB.put('\uE10C', "\uD83D\uDC7D");
        subSB.put('\uE32C', "\uD83D\uDC9B");
        subSB.put('\uE32A', "\uD83D\uDC99");
        subSB.put('\uE32D', "\uD83D\uDC9C");
        subSB.put('\uE328', "\uD83D\uDC97");
        subSB.put('\uE32B', "\uD83D\uDC9A");
        subSB.put('\uE022', "\u2764");
        subSB.put('\uE023', "\uD83D\uDC94");
        subSB.put('\uE327', "\uD83D\uDC93");
        subSB.put('\uE329', "\uD83D\uDC98");
        subSB.put('\uE32E', "\u2728");
        subSB.put('\uE335', "\uD83C\uDF1F");
        subSB.put('\uE334', "\uD83D\uDCA2");
        subSB.put('\uE337', "\u2755");
        subSB.put('\uE336', "\u2754");
        subSB.put('\uE13C', "\uD83D\uDCA4");
        subSB.put('\uE330', "\uD83D\uDCA8");
        subSB.put('\uE331', "\uD83D\uDCA6");
        subSB.put('\uE326', "\uD83C\uDFB6");
        subSB.put('\uE03E', "\uD83C\uDFB5");
        subSB.put('\uE11D', "\uD83D\uDD25");
        subSB.put('\uE05A', "\uD83D\uDCA9");
        subSB.put('\uE00E', "\uD83D\uDC4D");
        subSB.put('\uE421', "\uD83D\uDC4E");
        subSB.put('\uE420', "\uD83D\uDC4C");
        subSB.put('\uE00D', "\uD83D\uDC4A");
        subSB.put('\uE010', "\u270A");
        subSB.put('\uE011', "\u270C");
        subSB.put('\uE41E', "\uD83D\uDC4B");
        subSB.put('\uE012', "\u270B");
        subSB.put('\uE422', "\uD83D\uDC50");
        subSB.put('\uE22E', "\uD83D\uDC46");
        subSB.put('\uE22F', "\uD83D\uDC47");
        subSB.put('\uE231', "\uD83D\uDC49");
        subSB.put('\uE230', "\uD83D\uDC48");
        subSB.put('\uE427', "\uD83D\uDE4C");
        subSB.put('\uE41D', "\uD83D\uDE4F");
        subSB.put('\uE00F', "\u261D");
        subSB.put('\uE41F', "\uD83D\uDC4F");
        subSB.put('\uE14C', "\uD83D\uDCAA");
        subSB.put('\uE201', "\uD83D\uDEB6");
        subSB.put('\uE115', "\uD83C\uDFC3");
        subSB.put('\uE428', "\uD83D\uDC6B");
        subSB.put('\uE51F', "\uD83D\uDC83");
        subSB.put('\uE429', "\uD83D\uDC6F");
        subSB.put('\uE424', "\uD83D\uDE46");
        subSB.put('\uE423', "\uD83D\uDE45");
        subSB.put('\uE253', "\uD83D\uDC81");
        subSB.put('\uE426', "\uD83D\uDE47");
        subSB.put('\uE111', "\uD83D\uDC8F");
        subSB.put('\uE425', "\uD83D\uDC91");
        subSB.put('\uE31E', "\uD83D\uDC86");
        subSB.put('\uE31F', "\uD83D\uDC87");
        subSB.put('\uE31D', "\uD83D\uDC85");
        subSB.put('\uE001', "\uD83D\uDC66");
        subSB.put('\uE002', "\uD83D\uDC67");
        subSB.put('\uE005', "\uD83D\uDC69");
        subSB.put('\uE004', "\uD83D\uDC68");
        subSB.put('\uE51A', "\uD83D\uDC76");
        subSB.put('\uE519', "\uD83D\uDC75");
        subSB.put('\uE518', "\uD83D\uDC74");
        subSB.put('\uE515', "\uD83D\uDC71");
        subSB.put('\uE516', "\uD83D\uDC72");
        subSB.put('\uE517', "\uD83D\uDC73");
        subSB.put('\uE51B', "\uD83D\uDC77");
        subSB.put('\uE152', "\uD83D\uDC6E");
        subSB.put('\uE04E', "\uD83D\uDC7C");
        subSB.put('\uE51C', "\uD83D\uDC78");
        subSB.put('\uE51E', "\uD83D\uDC82");
        subSB.put('\uE11C', "\uD83D\uDC80");
        subSB.put('\uE536', "\uD83D\uDC63");
        subSB.put('\uE003', "\uD83D\uDC8B");
        subSB.put('\uE41C', "\uD83D\uDC44");
        subSB.put('\uE41B', "\uD83D\uDC42");
        subSB.put('\uE419', "\uD83D\uDC40");
        subSB.put('\uE41A', "\uD83D\uDC43");
        subSB.put('\uE04A', "\u2600");
        subSB.put('\uE04B', "\u2614");
        subSB.put('\uE049', "\u2601");
        subSB.put('\uE048', "\u26C4");
        subSB.put('\uE04C', "\uD83C\uDF19");
        subSB.put('\uE13D', "\u26A1");
        subSB.put('\uE443', "\uD83C\uDF00");
        subSB.put('\uE43E', "\uD83C\uDF0A");
        subSB.put('\uE04F', "\uD83D\uDC31");
        subSB.put('\uE052', "\uD83D\uDC36");
        subSB.put('\uE053', "\uD83D\uDC2D");
        subSB.put('\uE524', "\uD83D\uDC39");
        subSB.put('\uE52C', "\uD83D\uDC30");
        subSB.put('\uE52A', "\uD83D\uDC3A");
        subSB.put('\uE531', "\uD83D\uDC38");
        subSB.put('\uE050', "\uD83D\uDC2F");
        subSB.put('\uE527', "\uD83D\uDC28");
        subSB.put('\uE051', "\uD83D\uDC3B");
        subSB.put('\uE10B', "\uD83D\uDC37");
        subSB.put('\uE52B', "\uD83D\uDC2E");
        subSB.put('\uE52F', "\uD83D\uDC17");
        subSB.put('\uE109', "\uD83D\uDC35");
        subSB.put('\uE528', "\uD83D\uDC12");
        subSB.put('\uE01A', "\uD83D\uDC34");
        subSB.put('\uE134', "\uD83D\uDC0E");
        subSB.put('\uE530', "\uD83D\uDC2B");
        subSB.put('\uE529', "\uD83D\uDC11");
        subSB.put('\uE526', "\uD83D\uDC18");
        subSB.put('\uE52D', "\uD83D\uDC0D");
        subSB.put('\uE521', "\uD83D\uDC26");
        subSB.put('\uE523', "\uD83D\uDC24");
        subSB.put('\uE52E', "\uD83D\uDC14");
        subSB.put('\uE055', "\uD83D\uDC27");
        subSB.put('\uE525', "\uD83D\uDC1B");
        subSB.put('\uE10A', "\uD83D\uDC19");
        subSB.put('\uE522', "\uD83D\uDC20");
        subSB.put('\uE019', "\uD83D\uDC1F");
        subSB.put('\uE054', "\uD83D\uDC33");
        subSB.put('\uE520', "\uD83D\uDC2C");
        subSB.put('\uE306', "\uD83D\uDC90");
        subSB.put('\uE030', "\uD83C\uDF38");
        subSB.put('\uE304', "\uD83C\uDF37");
        subSB.put('\uE110', "\uD83C\uDF40");
        subSB.put('\uE032', "\uD83C\uDF39");
        subSB.put('\uE305', "\uD83C\uDF3B");
        subSB.put('\uE303', "\uD83C\uDF3A");
        subSB.put('\uE118', "\uD83C\uDF41");
        subSB.put('\uE447', "\uD83C\uDF43");
        subSB.put('\uE119', "\uD83C\uDF42");
        subSB.put('\uE307', "\uD83C\uDF34");
        subSB.put('\uE308', "\uD83C\uDF35");
        subSB.put('\uE444', "\uD83C\uDF3E");
        subSB.put('\uE441', "\uD83D\uDC1A");
        subSB.put('\uE436', "\uD83C\uDF8D");
        subSB.put('\uE437', "\uD83D\uDC9D");
        subSB.put('\uE438', "\uD83C\uDF8E");
        subSB.put('\uE43A', "\uD83C\uDF92");
        subSB.put('\uE439', "\uD83C\uDF93");
        subSB.put('\uE43B', "\uD83C\uDF8F");
        subSB.put('\uE117', "\uD83C\uDF86");
        subSB.put('\uE440', "\uD83C\uDF87");
        subSB.put('\uE442', "\uD83C\uDF90");
        subSB.put('\uE446', "\uD83C\uDF91");
        subSB.put('\uE445', "\uD83C\uDF83");
        subSB.put('\uE11B', "\uD83D\uDC7B");
        subSB.put('\uE448', "\uD83C\uDF85");
        subSB.put('\uE033', "\uD83C\uDF84");
        subSB.put('\uE112', "\uD83C\uDF81");
        subSB.put('\uE325', "\uD83D\uDD14");
        subSB.put('\uE312', "\uD83C\uDF89");
        subSB.put('\uE310', "\uD83C\uDF88");
        subSB.put('\uE126', "\uD83D\uDCBF");
        subSB.put('\uE127', "\uD83D\uDCC0");
        subSB.put('\uE008', "\uD83D\uDCF7");
        subSB.put('\uE03D', "\uD83C\uDFA5");
        subSB.put('\uE00C', "\uD83D\uDCBB");
        subSB.put('\uE12A', "\uD83D\uDCFA");
        subSB.put('\uE00A', "\uD83D\uDCF1");
        subSB.put('\uE00B', "\uD83D\uDCE0");
        subSB.put('\uE009', "\u260E");
        subSB.put('\uE316', "\uD83D\uDCBD");
        subSB.put('\uE129', "\uD83D\uDCFC");
        subSB.put('\uE141', "\uD83D\uDD0A");
        subSB.put('\uE142', "\uD83D\uDCE2");
        subSB.put('\uE317', "\uD83D\uDCE3");
        subSB.put('\uE128', "\uD83D\uDCFB");
        subSB.put('\uE14B', "\uD83D\uDCE1");
        subSB.put('\uE211', "\u27BF");
        subSB.put('\uE114', "\uD83D\uDD0D");
        subSB.put('\uE145', "\uD83D\uDD13");
        subSB.put('\uE144', "\uD83D\uDD12");
        subSB.put('\uE03F', "\uD83D\uDD11");
        subSB.put('\uE313', "\u2702");
        subSB.put('\uE116', "\uD83D\uDD28");
        subSB.put('\uE10F', "\uD83D\uDCA1");
        subSB.put('\uE104', "\uD83D\uDCF2");
        subSB.put('\uE103', "\uD83D\uDCE9");
        subSB.put('\uE101', "\uD83D\uDCEB");
        subSB.put('\uE102', "\uD83D\uDCEE");
        subSB.put('\uE13F', "\uD83D\uDEC0");
        subSB.put('\uE140', "\uD83D\uDEBD");
        subSB.put('\uE11F', "\uD83D\uDCBA");
        subSB.put('\uE12F', "\uD83D\uDCB0");
        subSB.put('\uE031', "\uD83D\uDD31");
        subSB.put('\uE30E', "\uD83D\uDEAC");
        subSB.put('\uE311', "\uD83D\uDCA3");
        subSB.put('\uE113', "\uD83D\uDD2B");
        subSB.put('\uE30F', "\uD83D\uDC8A");
        subSB.put('\uE13B', "\uD83D\uDC89");
        subSB.put('\uE42B', "\uD83C\uDFC8");
        subSB.put('\uE42A', "\uD83C\uDFC0");
        subSB.put('\uE018', "\u26BD");
        subSB.put('\uE016', "\u26BE");
        subSB.put('\uE015', "\uD83C\uDFBE");
        subSB.put('\uE014', "\u26F3");
        subSB.put('\uE42C', "\uD83C\uDFB1");
        subSB.put('\uE42D', "\uD83C\uDFCA");
        subSB.put('\uE017', "\uD83C\uDFC4");
        subSB.put('\uE013', "\uD83C\uDFBF");
        subSB.put('\uE20E', "\u2660");
        subSB.put('\uE20C', "\u2665");
        subSB.put('\uE20F', "\u2663");
        subSB.put('\uE20D', "\u2666");
        subSB.put('\uE131', "\uD83C\uDFC6");
        subSB.put('\uE12B', "\uD83D\uDC7E");
        subSB.put('\uE130', "\uD83C\uDFAF");
        subSB.put('\uE12D', "\uD83C\uDC04");
        subSB.put('\uE324', "\uD83C\uDFAC");
        subSB.put('\uE301', "\uD83D\uDCDD");
        subSB.put('\uE148', "\uD83D\uDCD6");
        subSB.put('\uE502', "\uD83C\uDFA8");
        subSB.put('\uE03C', "\uD83C\uDFA4");
        subSB.put('\uE30A', "\uD83C\uDFA7");
        subSB.put('\uE042', "\uD83C\uDFBA");
        subSB.put('\uE040', "\uD83C\uDFB7");
        subSB.put('\uE041', "\uD83C\uDFB8");
        subSB.put('\uE12C', "\u303D");
        subSB.put('\uE007', "\uD83D\uDC5F");
        subSB.put('\uE31A', "\uD83D\uDC61");
        subSB.put('\uE13E', "\uD83D\uDC60");
        subSB.put('\uE31B', "\uD83D\uDC62");
        subSB.put('\uE006', "\uD83D\uDC55");
        subSB.put('\uE302', "\uD83D\uDC54");
        subSB.put('\uE319', "\uD83D\uDC57");
        subSB.put('\uE321', "\uD83D\uDC58");
        subSB.put('\uE322', "\uD83D\uDC59");
        subSB.put('\uE314', "\uD83C\uDF80");
        subSB.put('\uE503', "\uD83C\uDFA9");
        subSB.put('\uE10E', "\uD83D\uDC51");
        subSB.put('\uE318', "\uD83D\uDC52");
        subSB.put('\uE43C', "\uD83C\uDF02");
        subSB.put('\uE11E', "\uD83D\uDCBC");
        subSB.put('\uE323', "\uD83D\uDC5C");
        subSB.put('\uE31C', "\uD83D\uDC84");
        subSB.put('\uE034', "\uD83D\uDC8D");
        subSB.put('\uE035', "\uD83D\uDC8E");
        subSB.put('\uE045', "\u2615");
        subSB.put('\uE338', "\uD83C\uDF75");
        subSB.put('\uE047', "\uD83C\uDF7A");
        subSB.put('\uE30C', "\uD83C\uDF7B");
        subSB.put('\uE044', "\uD83C\uDF78");
        subSB.put('\uE30B', "\uD83C\uDF76");
        subSB.put('\uE043', "\uD83C\uDF74");
        subSB.put('\uE120', "\uD83C\uDF54");
        subSB.put('\uE33B', "\uD83C\uDF5F");
        subSB.put('\uE33F', "\uD83C\uDF5D");
        subSB.put('\uE341', "\uD83C\uDF5B");
        subSB.put('\uE34C', "\uD83C\uDF71");
        subSB.put('\uE344', "\uD83C\uDF63");
        subSB.put('\uE342', "\uD83C\uDF59");
        subSB.put('\uE33D', "\uD83C\uDF58");
        subSB.put('\uE33E', "\uD83C\uDF5A");
        subSB.put('\uE340', "\uD83C\uDF5C");
        subSB.put('\uE34D', "\uD83C\uDF72");
        subSB.put('\uE339', "\uD83C\uDF5E");
        subSB.put('\uE147', "\uD83C\uDF73");
        subSB.put('\uE343', "\uD83C\uDF62");
        subSB.put('\uE33C', "\uD83C\uDF61");
        subSB.put('\uE33A', "\uD83C\uDF66");
        subSB.put('\uE43F', "\uD83C\uDF67");
        subSB.put('\uE34B', "\uD83C\uDF82");
        subSB.put('\uE046', "\uD83C\uDF70");
        subSB.put('\uE345', "\uD83C\uDF4E");
        subSB.put('\uE346', "\uD83C\uDF4A");
        subSB.put('\uE348', "\uD83C\uDF49");
        subSB.put('\uE347', "\uD83C\uDF53");
        subSB.put('\uE34A', "\uD83C\uDF46");
        subSB.put('\uE349', "\uD83C\uDF45");
        subSB.put('\uE036', "\uD83C\uDFE0");
        subSB.put('\uE157', "\uD83C\uDFEB");
        subSB.put('\uE038', "\uD83C\uDFE2");
        subSB.put('\uE153', "\uD83C\uDFE3");
        subSB.put('\uE155', "\uD83C\uDFE5");
        subSB.put('\uE14D', "\uD83C\uDFE6");
        subSB.put('\uE156', "\uD83C\uDFEA");
        subSB.put('\uE501', "\uD83C\uDFE9");
        subSB.put('\uE158', "\uD83C\uDFE8");
        subSB.put('\uE43D', "\uD83D\uDC92");
        subSB.put('\uE037', "\u26EA");
        subSB.put('\uE504', "\uD83C\uDFEC");
        subSB.put('\uE44A', "\uD83C\uDF07");
        subSB.put('\uE146', "\uD83C\uDF06");
        subSB.put('\uE154', "\uD83C\uDFE7");
        subSB.put('\uE505', "\uD83C\uDFEF");
        subSB.put('\uE506', "\uD83C\uDFF0");
        subSB.put('\uE122', "\u26FA");
        subSB.put('\uE508', "\uD83C\uDFED");
        subSB.put('\uE509', "\uD83D\uDDFC");
        subSB.put('\uE03B', "\uD83D\uDDFB");
        subSB.put('\uE04D', "\uD83C\uDF04");
        subSB.put('\uE449', "\uD83C\uDF05");
        subSB.put('\uE44B', "\uD83C\uDF03");
        subSB.put('\uE51D', "\uD83D\uDDFD");
        subSB.put('\uE44C', "\uD83C\uDF08");
        subSB.put('\uE124', "\uD83C\uDFA1");
        subSB.put('\uE121', "\u26F2");
        subSB.put('\uE433', "\uD83C\uDFA2");
        subSB.put('\uE202', "\uD83D\uDEA2");
        subSB.put('\uE135', "\uD83D\uDEA4");
        subSB.put('\uE01C', "\u26F5");
        subSB.put('\uE01D', "\u2708");
        subSB.put('\uE10D', "\uD83D\uDE80");
        subSB.put('\uE136', "\uD83D\uDEB2");
        subSB.put('\uE42E', "\uD83D\uDE99");
        subSB.put('\uE01B', "\uD83D\uDE97");
        subSB.put('\uE15A', "\uD83D\uDE95");
        subSB.put('\uE159', "\uD83D\uDE8C");
        subSB.put('\uE432', "\uD83D\uDE93");
        subSB.put('\uE430', "\uD83D\uDE92");
        subSB.put('\uE431', "\uD83D\uDE91");
        subSB.put('\uE42F', "\uD83D\uDE9A");
        subSB.put('\uE01E', "\uD83D\uDE83");
        subSB.put('\uE039', "\uD83D\uDE89");
        subSB.put('\uE435', "\uD83D\uDE84");
        subSB.put('\uE01F', "\uD83D\uDE85");
        subSB.put('\uE125', "\uD83C\uDFAB");
        subSB.put('\uE03A', "\u26FD");
        subSB.put('\uE14E', "\uD83D\uDEA5");
        subSB.put('\uE252', "\u26A0");
        subSB.put('\uE137', "\uD83D\uDEA7");
        subSB.put('\uE209', "\uD83D\uDD30");
        subSB.put('\uE133', "\uD83C\uDFB0");
        subSB.put('\uE150', "\uD83D\uDE8F");
        subSB.put('\uE320', "\uD83D\uDC88");
        subSB.put('\uE123', "\u2668");
        subSB.put('\uE132', "\uD83C\uDFC1");
        subSB.put('\uE143', "\uD83C\uDF8C");
        subSB.put('\uE50B', "\uD83C\uDDEF\uD83C\uDDF5");
        subSB.put('\uE514', "\uD83C\uDDF0\uD83C\uDDF7");
        subSB.put('\uE513', "\uD83C\uDDE8\uD83C\uDDF3");
        subSB.put('\uE50C', "\uD83C\uDDFA\uD83C\uDDF8");
        subSB.put('\uE50D', "\uD83C\uDDEB\uD83C\uDDF7");
        subSB.put('\uE511', "\uD83C\uDDEA\uD83C\uDDF8");
        subSB.put('\uE50F', "\uD83C\uDDEE\uD83C\uDDF9");
        subSB.put('\uE512', "\uD83C\uDDF7\uD83C\uDDFA");
        subSB.put('\uE510', "\uD83C\uDDEC\uD83C\uDDE7");
        subSB.put('\uE50E', "\uD83C\uDDE9\uD83C\uDDEA");
        subSB.put('\uE21C', "\u0031\u20E3");
        subSB.put('\uE21D', "\u0032\u20E3");
        subSB.put('\uE21E', "\u0033\u20E3");
        subSB.put('\uE21F', "\u0034\u20E3");
        subSB.put('\uE220', "\u0035\u20E3");
        subSB.put('\uE221', "\u0036\u20E3");
        subSB.put('\uE222', "\u0037\u20E3");
        subSB.put('\uE223', "\u0038\u20E3");
        subSB.put('\uE224', "\u0039\u20E3");
        subSB.put('\uE225', "\u0030\u20E3");
        subSB.put('\uE210', "\u0023\u20E3");
        subSB.put('\uE232', "\u2B06");
        subSB.put('\uE233', "\u2B07");
        subSB.put('\uE235', "\u2B05");
        subSB.put('\uE234', "\u27A1");
        subSB.put('\uE236', "\u2197");
        subSB.put('\uE237', "\u2196");
        subSB.put('\uE238', "\u2198");
        subSB.put('\uE239', "\u2199");
        subSB.put('\uE23B', "\u25C0");
        subSB.put('\uE23A', "\u25B6");
        subSB.put('\uE23D', "\u23EA");
        subSB.put('\uE23C', "\u23E9");
        subSB.put('\uE24D', "\uD83C\uDD97");
        subSB.put('\uE212', "\uD83C\uDD95");
        subSB.put('\uE24C', "\uD83D\uDD1D");
        subSB.put('\uE213', "\uD83C\uDD99");
        subSB.put('\uE214', "\uD83C\uDD92");
        subSB.put('\uE507', "\uD83C\uDFA6");
        subSB.put('\uE203', "\uD83C\uDE01");
        subSB.put('\uE20B', "\uD83D\uDCF6");
        subSB.put('\uE22A', "\uD83C\uDE35");
        subSB.put('\uE22B', "\uD83C\uDE33");
        subSB.put('\uE226', "\uD83C\uDE50");
        subSB.put('\uE227', "\uD83C\uDE39");
        subSB.put('\uE22C', "\uD83C\uDE2F");
        subSB.put('\uE22D', "\uD83C\uDE3A");
        subSB.put('\uE215', "\uD83C\uDE36");
        subSB.put('\uE216', "\uD83C\uDE1A");
        subSB.put('\uE217', "\uD83C\uDE37");
        subSB.put('\uE218', "\uD83C\uDE38");
        subSB.put('\uE228', "\uD83C\uDE02");
        subSB.put('\uE151', "\uD83D\uDEBB");
        subSB.put('\uE138', "\uD83D\uDEB9");
        subSB.put('\uE139', "\uD83D\uDEBA");
        subSB.put('\uE13A', "\uD83D\uDEBC");
        subSB.put('\uE208', "\uD83D\uDEAD");
        subSB.put('\uE14F', "\uD83C\uDD7F");
        subSB.put('\uE20A', "\u267F");
        subSB.put('\uE434', "\uD83D\uDE87");
        subSB.put('\uE309', "\uD83D\uDEBE");
        subSB.put('\uE315', "\u3299");
        subSB.put('\uE30D', "\u3297");
        subSB.put('\uE207', "\uD83D\uDD1E");
        subSB.put('\uE229', "\uD83C\uDD94");
        subSB.put('\uE206', "\u2733");
        subSB.put('\uE205', "\u2734");
        subSB.put('\uE204', "\uD83D\uDC9F");
        subSB.put('\uE12E', "\uD83C\uDD9A");
        subSB.put('\uE250', "\uD83D\uDCF3");
        subSB.put('\uE251', "\uD83D\uDCF4");
        subSB.put('\uE14A', "\uD83D\uDCB9");
        subSB.put('\uE149', "\uD83D\uDCB1");
        subSB.put('\uE23F', "\u2648");
        subSB.put('\uE240', "\u2649");
        subSB.put('\uE241', "\u264A");
        subSB.put('\uE242', "\u264B");
        subSB.put('\uE243', "\u264C");
        subSB.put('\uE244', "\u264D");
        subSB.put('\uE245', "\u264E");
        subSB.put('\uE246', "\u264F");
        subSB.put('\uE247', "\u2650");
        subSB.put('\uE248', "\u2651");
        subSB.put('\uE249', "\u2652");
        subSB.put('\uE24A', "\u2653");
        subSB.put('\uE24B', "\u26CE");
        subSB.put('\uE23E', "\uD83D\uDD2F");
        subSB.put('\uE532', "\uD83C\uDD70");
        subSB.put('\uE533', "\uD83C\uDD71");
        subSB.put('\uE534', "\uD83C\uDD8E");
        subSB.put('\uE535', "\uD83C\uDD7E");
        subSB.put('\uE21A', "\uD83D\uDD32");
        subSB.put('\uE219', "\uD83D\uDD34");
        subSB.put('\uE21B', "\uD83D\uDD33");
        subSB.put('\uE02F', "\uD83D\uDD5B");
        subSB.put('\uE024', "\uD83D\uDD50");
        subSB.put('\uE025', "\uD83D\uDD51");
        subSB.put('\uE026', "\uD83D\uDD52");
        subSB.put('\uE027', "\uD83D\uDD53");
        subSB.put('\uE028', "\uD83D\uDD54");
        subSB.put('\uE029', "\uD83D\uDD55");
        subSB.put('\uE02A', "\uD83D\uDD56");
        subSB.put('\uE02B', "\uD83D\uDD57");
        subSB.put('\uE02C', "\uD83D\uDD58");
        subSB.put('\uE02D', "\uD83D\uDD59");
        subSB.put('\uE02E', "\uD83D\uDD5A");
        subSB.put('\uE332', "\u2B55");
        subSB.put('\uE333', "\u274C");
        subSB.put('\uE24E', "\u00A9");
        subSB.put('\uE24F', "\u00AE");
        subSB.put('\uE537', "\u2122");
	}

    // A function to replace all Emoji with SB Unicode with UTF16 (happens with some emoji that are copied from Whatsapp)
    public static CharSequence fixSBEmoji(CharSequence cs) {
        if (cs == null || cs.length() == 0) {
            return cs;
        }

        String s = cs.toString();

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            CharSequence newCode = Emoji.subSB.get(c);
            if (newCode != null) {
                s = s.replace(String.valueOf(c), newCode);
            }
        }

        return s;
    }

    private static Bitmap loadEmoji() {
		try {
            float scale = 1.0f;
            int imageResize = 1;
            if (Utilities.density <= 1.0f) {
                scale = 2.0f;
                imageResize = 2;
            } else if (Utilities.density <= 1.5f) {
                scale = 3.0f;
                imageResize = 2;
            } else if (Utilities.density <= 2.0f) {
                scale = 2.0f;
            } else {
                scale = 3.0f;
            }

            String imageName = String.format(Locale.US, "emoji%.01fx.jpg", scale);
            File imageFile = ApplicationLoader.applicationContext.getFileStreamPath(imageName);
            if (!imageFile.exists()) {
                InputStream is = ApplicationLoader.applicationContext.getAssets().open("emoji/" + imageName);
                Utilities.copyFile(is, imageFile);
                is.close();
            }

            BitmapFactory.Options opts = new BitmapFactory.Options();
            opts.inJustDecodeBounds = true;
            BitmapFactory.decodeFile(imageFile.getAbsolutePath(), opts);

            final Bitmap colorsBitmap = Bitmap.createBitmap(opts.outWidth / imageResize, opts.outHeight / imageResize, Bitmap.Config.ARGB_8888);
            Utilities.loadBitmap(imageFile.getAbsolutePath(), colorsBitmap, imageResize);

            imageName = String.format(Locale.US, "emoji%.01fx_a.jpg", scale);
            imageFile = ApplicationLoader.applicationContext.getFileStreamPath(imageName);
            if (!imageFile.exists()) {
                InputStream is = ApplicationLoader.applicationContext.getAssets().open("emoji/" + imageName);
                Utilities.copyFile(is, imageFile);
                is.close();
            }

            Utilities.loadBitmap(imageFile.getAbsolutePath(), colorsBitmap, imageResize);

            Utilities.RunOnUIThread(new Runnable() {
                @Override
                public void run() {
                    emojiBmp = colorsBitmap;
                    NotificationCenter.getInstance().postNotificationName(999);
                }
            });

			return colorsBitmap;
		} catch(Throwable x) {
            FileLog.e("tmessages", "Error loading emoji", x);
        }
		return null;
	}
	
	private static void loadEmojiAsync() {
		if (loadingEmoji) {
            return;
        }
        loadingEmoji = true;
		new Thread(new Runnable() {
            public void run() {
                loadEmoji();
                loadingEmoji = false;
            }
        }).start();
	}
	
	public static void invalidateAll(View view) {
		if (view instanceof ViewGroup) {
			ViewGroup g = (ViewGroup)view;
			for (int i = 0; i < g.getChildCount(); i++) {
				invalidateAll(g.getChildAt(i));
			}
		} else if (view instanceof TextView) {
			view.invalidate();
		}
	}
	
	public static Drawable getEmojiDrawable(long code) {
		DrawableInfo info = rects.get(code);
		if (info == null) {
            FileLog.e("tmessages", "No emoji drawable for code " + String.format("%016X", code));
			return null;
		}
		EmojiDrawable ed = new EmojiDrawable(info);
		ed.setBounds(0, 0, drawImgSize, drawImgSize);
		if (emojiBmp == null) {
            loadEmojiAsync();
        }
		return ed;
	}
	
	public static Drawable getEmojiBigDrawable(long code) {
		EmojiDrawable ed = (EmojiDrawable)getEmojiDrawable(code);
		if (ed == null) {
            return null;
        }
		ed.setBounds(0, 0, bigImgSize, bigImgSize);
		ed.fullSize = true;
		return ed;
	}
	
	public static class EmojiDrawable extends Drawable {
		Rect rect;
		boolean fullSize = false;
		private static Paint paint;
		
		static {
			paint = new Paint();
            paint.setFlags(Paint.FILTER_BITMAP_FLAG | Paint.ANTI_ALIAS_FLAG);
		}
		
		public EmojiDrawable(DrawableInfo info) {
			rect = info.rect;
		}
		
		@Override
		public void draw(Canvas canvas) {
			if (emojiBmp == null) {
				canvas.drawRect(getBounds(), placeholderPaint);
				return;
			}
			Rect b = copyBounds();
			int cX = b.centerX(), cY = b.centerY();
			b.left = cX - (fullSize ? bigImgSize : drawImgSize) / 2;
			b.right = cX + (fullSize ? bigImgSize : drawImgSize) / 2;
			b.top = cY - (fullSize ? bigImgSize : drawImgSize) / 2;
			b.bottom = cY + (fullSize ? bigImgSize : drawImgSize) / 2;
            if (!canvas.quickReject(b.left, b.top, b.right, b.bottom, Canvas.EdgeType.AA)) {
                canvas.drawBitmap(emojiBmp, rect, b, paint);
            }
		}

		@Override
		public int getOpacity() {
			return 0;
		}

		@Override
		public void setAlpha(int alpha) {

        }

		@Override
		public void setColorFilter(ColorFilter cf) {

        }
	}
	
	private static class DrawableInfo {
		Rect rect;
		public DrawableInfo(Rect rect) {
			this.rect = rect;
		}
	}

    private static boolean inArray(char c, char[] a) {
        for (char cc : a) {
            if (cc == c) {
                return true;
            }
        }
        return false;
    }

    public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fontMetrics, int size) {
        if (cs == null || cs.length() == 0) {
            return cs;
        }
        Spannable s;
        if (cs instanceof Spannable) {
            s = (Spannable)cs;
        } else {
            s = Spannable.Factory.getInstance().newSpannable(cs);
        }
        long buf = 0;
        int emojiCount = 0;
        for (int i = 0; i < cs.length(); i++) {
            char c = cs.charAt(i);
            if (c == 0xD83C || c == 0xD83D || (buf != 0 && (buf & 0xFFFFFFFF00000000L) == 0 && (c >= 0xDDE6 && c <= 0xDDFA))) {
                buf <<= 16;
                buf |= c;
            } else if (buf > 0 && (c & 0xF000) == 0xD000) {
                buf <<= 16;
                buf |= c;
                Drawable d = Emoji.getEmojiDrawable(buf);
                if (d != null) {
                    EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
                    emojiCount++;
                    if (c>= 0xDDE6 && c <= 0xDDFA) {
                        s.setSpan(span, i - 3, i + 1, 0);
                    } else {
                        s.setSpan(span, i - 1, i + 1, 0);
                    }
                }
                buf = 0;
            } else if (c == 0x20E3) {
                if (i > 0) {
                    char c2 = cs.charAt(i - 1);
                    if ((c2 >= '0' && c2 <= '9') || c2 == '#') {
                        buf = c2;
                        buf <<= 16;
                        buf |= c;
                        Drawable d = Emoji.getEmojiDrawable(buf);
                        if (d != null) {
                            EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
                            emojiCount++;
                            s.setSpan(span, i - 1, i + 1, 0);
                        }
                        buf = 0;
                    }
                }
            } else if (inArray(c, emojiChars)) {
                Drawable d = Emoji.getEmojiDrawable(c);
                if (d != null) {
                    EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
                    emojiCount++;
                    s.setSpan(span, i, i + 1, 0);
                }
            }
            if (emojiCount >= 200) {
                break;
            }
        }
        return s;
    }

    public static class EmojiSpan extends ImageSpan {
        private Paint.FontMetricsInt fontMetrics = null;
        private int size = Utilities.dp(20);

        public EmojiSpan(Drawable d, int verticalAlignment, int s, Paint.FontMetricsInt original) {
            super(d, verticalAlignment);
            fontMetrics = original;
            size = s;
        }

        @Override
        public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {
            if (fm == null) {
                fm = new Paint.FontMetricsInt();
            }

            if (fontMetrics == null) {
                int sz = super.getSize(paint, text, start, end, fm);

                int offset = Utilities.dp(8);
                int w = Utilities.dp(10);
                fm.top = -w - offset;
                fm.bottom = w - offset;
                fm.ascent = -w - offset;
                fm.leading = 0;
                fm.descent = w - offset;

                return sz;
            } else {
                if (fm != null) {
                    fm.ascent = fontMetrics.ascent;
                    fm.descent = fontMetrics.descent;

                    fm.top = fontMetrics.top;
                    fm.bottom = fontMetrics.bottom;
                }
                return size;
            }
        }
    }
}
